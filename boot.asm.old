ORG 0x7c00
BITS 16
_start:
    jmp short start
    nop

    times 33 db 0

start:
    jmp 0:step2

;handle_zero:
;    mov ah, 0eh
;    mov al, 'A'
;    mov bx, 0x00
;    int 0x10
;    iret
    
;handle_one:
;    mov ah, 0eh
;    mov al, 'V'
;    mov bx, 0x00
;    int 0x10
;    iret

step2:
    cli ; Clear Interrupts
    mov ax, 0x00
    mov ds, ax
    mov es, ax
    mov ax, 0x00
    mov ss, ax
    mov sp, 0x7c00
    sti ; Enable Interrupts

;    mov word[ss:0x00], handle_zero
;    mov word[ss:0x02], 0x7c0

;    mov word[ss:0x04], handle_one
;    mov word[ss:0x06], 0x7c0

;    int 1

;    mov ax, 0x00
;    div ax

;    mov si, message
;    call print
;    mov ah, 2 ; Read sector command
;    mov al, 1 ; One sector to read
;    mov ch, 0 ; Cyl low 8 bits
;    mov cl, 2 ; Read sector 2
;    mov dh, 0 ; Head number
;    mov bx, buffer
;    int 0x13

;    jc error

;    mov si, buffer
;    call print

    jmp $
; GDT

.load_protected:
    cli
    lgdt[gdt_descriptor]
    mov eax, cr0
    or eax, 0x1
    mov cr0, eax
    
gdt_start:
gdt_null:
    dd 0x0
    dd 0x0

gdt_code:
    dw 0xffff   ; Segment limit first 0 - 15 bits
    dw 0        ; Base first 0 - 15 bits
    db 0
    db 0x9a
    db 11001111b    ; high 4 bit flags and low 4 bit flags
    db 0

; offset 0x10
gdt_data:
    dw 0xffff
    dw 0
    db 0
    db 0x92
    db 11001111b    ; high 4 bit flags and low 4 bit flags
    db 0

gdt_end:
gdt_descriptor:
    dw gdt_end - gdt_start - 1
    dd gdt_start

;error:
;    mov si, error_message
;    call print

;    jmp $

print:
    mov bx, 0
.loop:
    lodsb
    cmp al, 0
    je .done
    call print_char
    jmp .loop

.done:    
    ret

print_char:
    mov ah, 0eh
    int 0x10
    ret

;message: db 'Hello World!', 0
error_message: db 'Failed to load sector', 0

times 510-($ - $$) db 0
dw 0xAA55

buffer: